--- NonBlockingThreadPool.h	2022-07-25 12:41:05.000000000 +0800
+++ NonBlockingThreadPool.h	2022-08-12 10:50:30.000000000 +0800
@@ -10,6 +10,13 @@
 #ifndef EIGEN_CXX11_THREADPOOL_NONBLOCKING_THREAD_POOL_H
 #define EIGEN_CXX11_THREADPOOL_NONBLOCKING_THREAD_POOL_H
 
+#define MTMC_PROFILER
+
+#ifdef MTMC_PROFILER
+//#include "mtmc/mtmc_profiler.h"
+#include "mtmc/mtmc_temp_profiler.h"
+#endif
+
 namespace Eigen {
 
 template <typename Environment>
@@ -18,6 +25,10 @@
   typedef typename Environment::Task Task;
   typedef RunQueue<Task, 1024> Queue;
 
+#ifdef MTMC_PROFILER
+        mtmc::MTMCTemprolProfiler* prof;
+#endif
+
   ThreadPoolTempl(int num_threads, Environment env = Environment())
       : ThreadPoolTempl(num_threads, true, env) {}
 
@@ -51,20 +62,57 @@
 #ifndef EIGEN_THREAD_LOCAL
     init_barrier_.reset(new Barrier(num_threads_));
 #endif
+
+#ifdef MTMC_PROFILER
+            std::vector<int64_t> tid_arr(num_threads_);
+            std::atomic<int> cntr(0);
+            prof = new mtmc::MTMCTemprolProfiler();
+            prof->Init();
+#endif
+
     thread_data_.resize(num_threads_);
     for (int i = 0; i < num_threads_; i++) {
       SetStealPartition(i, EncodePartition(0, num_threads_));
       thread_data_[i].thread.reset(
-          env_.CreateThread([this, i]() { WorkerLoop(i); }));
+                        env_.CreateThread([this, i
+#ifdef MTMC_PROFILER
+                                                  ,&tid_arr,&cntr
+#endif
+                                          ]() {
+#ifdef MTMC_PROFILER
+                            tid_arr[i] = mtmc::MTMCTemprolProfiler::GetKtid();
+                            cntr.fetch_add(1);
+#endif
+                            WorkerLoop(i); }));
     }
 #ifndef EIGEN_THREAD_LOCAL
     // Wait for workers to initialize per_thread_map_. Otherwise we might race
     // with them in Schedule or CurrentThreadId.
     init_barrier_->Wait();
 #endif
+
+#ifdef MTMC_PROFILER
+            while (cntr.load() != num_threads_) {};
+            prof->ExportThreadPoolInfo(tid_arr);
+#endif
+
+        }
+
+        void* GetProfiler() {
+#ifdef MTMC_PROFILER
+            return prof;
+#else
+            return nullptr;
+#endif
   }
 
   ~ThreadPoolTempl() {
+
+#ifdef MTMC_PROFILER
+            prof->Close();
+            delete prof;
+#endif
+
     done_ = true;
 
     // Now if all threads block without work, they will start exiting.
@@ -104,7 +152,19 @@
 
   void ScheduleWithHint(std::function<void()> fn, int start,
                         int limit) override {
+#ifdef MTMC_PROFILER
+            auto parent_info = prof->GetParamsInfo();
+            auto fn_with_prof = [this, parent_info, fn] {
+                prof->LogStart(parent_info, "NULL");
+                fn();
+                prof->LogEnd();
+            };
+            Task t = env_.CreateTask(std::move(fn_with_prof));
+#else
     Task t = env_.CreateTask(std::move(fn));
+#endif
+
+
     PerThread* pt = GetPerThread();
     if (pt->pool == this) {
       // Worker thread of this pool, push onto the thread's queue.
